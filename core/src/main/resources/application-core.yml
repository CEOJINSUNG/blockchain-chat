spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/user?useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: root
    password: 1234
  jpa:
    show-sql: true
    database: mysql
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    generate-ddl: true
  kafka:
    consumer:
      bootstrap-servers: localhost:9092 # 접속하기 위한 서버
      group-id: test-group # consumer 가 속한 그룹
      auto-offset-reset: earliest # consumer 그룹에서 파티션의 위치를 나타내는 것으로 현재는 FIFO 방식
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer # key-value 를 string 으로 설정함
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer # 역직렬화
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer # 직렬화
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
  cloud:
    stream:
      function:
        definition: orderBuySupplier;orderSellSupplier
        bindings:
          orderBuySupplier-out-0:
            destination: orders.buy
            producer:
              configuration:
                key:
                  serializer: org.apache.kafka.common.serialization.LongSerializer
          orderSellSupplier-out-0:
            destination: orders.sell
            producer:
              configuration:
                key:
                  serializer: org.apache.kafka.common.serialization.LongSerializer
  application:
    name: blockchain-chat
  management:
    endpoints:
      web:
        exposure:
          include: prometheus
    metrics:
      tags:
        application: ${spring.application.name}    # 서비스 단위의 식별자. Prometheus label에 추가됨.

logging:
  level:
    root: info
    org:
      apache:
        kafka: info

